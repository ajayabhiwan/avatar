/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 LipSyncMen3.glb 
*/

import React, { useRef ,useEffect, useState} from 'react'
import { useGLTF, useAnimations, useFBX } from '@react-three/drei'
import { subscribe } from '../events'

export function LipSyncMen3({shouldTalk,setAnimationDuration,...props}) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/LipSyncMen3.glb')
  const { actions } = useAnimations(animations, group);

  // const {animations : idleAnimation} = useFBX("/animations/MaleAniIdle2.fbx");

  const {animations : idleAnimation} = useFBX("/models/menidleani.fbx");
    
    idleAnimation[0].name = "idlemen";
    console.log("idleAnimation---",idleAnimation);
  // const {animations:abhiidleanimation} = useFBX("/models/abhiidle.fbx");
  //  console.log("abhiidleanimation---",abhiidleanimation,actions)
  
  // abhiidleanimation[0].name = "Lipsync_animliplipsyncsoudi"
  // console.log("fbx idle animation",abhiidleanimation);
  const [animation , setanimation] = useState("idlemen");
  // let animationName = "Lipsync_animliplipsyncsoudi"
 

  const {actions : idleaction } = useAnimations([idleAnimation[0]], group);
  console.log("action -----idle---",idleaction);
  console.log("actions   animation ----",idleaction[[animation]]);
  // console.log("idle action----useeffect value",action.idle.reset().fadeIn(0.5).play())
 
  useEffect(()=>{
    console.log("Subscribe it")
    subscribe("startAnimation",StartTalk)
      // window.addEventListener("startAnimation",(e)=>{ StartTalk(e);});
    },[]);
    
    
    useEffect(()=>{
       if(idleaction) {
        console.warn("action[animation value-----]",idleaction.Lipsync_animliplipsyncsoudi  );
        idleaction?.Lipsync_animliplipsyncsoudi?.play();
        }

         idleaction[animation].play()
         console.warn("useeffect-value---",idleaction[animation].play());
    },[])
    
    function StartTalk(data){
      console.log("REceived data ",data)
    var talk=data.detail.talk;
    //var talk=data.detail.talk;
    
        if (talk==true) {
          
          // actions.talk.play();
          actions.Lipsync_animliplipsyncsoudi.play();
         

          
          // action.idle.reset().fadeIn(0.5).stop();
          // console.log("lipsync useeffect value-----",actions.Lipsync_animliplipsyncsoudi.play());
          
          
          console.log("Enetered", "for Talk***********")
          
          
        } else {  
          console.log("Enetered", "DStop")
          
        //  idleaction[animationName].fadeOut(0.5);
          // actions.talk.stop();
          actions.Lipsync_animliplipsyncsoudi.stop();
            // action.idle.reset().fadeIn(0.5).play();
            
            //  console.log("idle action----",idleaction.idle|idle.play());         
          
        
        }
      } 
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Lipsync_anim5Group" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group name="Lipsync_anim5DeformationSystem">
            <primitive object={nodes.Lipsync_anim5Root_M} />
            <group name="Lipsync_anim5pasted__polySurface1">
              <skinnedMesh name="Mesh003" geometry={nodes.Mesh003.geometry} material={materials['Lipsync_anim5:pasted__Material #30']} skeleton={nodes.Mesh003.skeleton} />
              <skinnedMesh name="Mesh003_1" geometry={nodes.Mesh003_1.geometry} material={materials['Lipsync_anim5:pasted__Material #29']} skeleton={nodes.Mesh003_1.skeleton} />
            </group>
            <skinnedMesh name="Lipsync_anim5pasted__polySurface18" geometry={nodes.Lipsync_anim5pasted__polySurface18.geometry} material={materials['Lipsync_anim5:pasted__Material #29.001']} skeleton={nodes.Lipsync_anim5pasted__polySurface18.skeleton} />
            <skinnedMesh name="Lipsync_anim5pasted__polySurface19" geometry={nodes.Lipsync_anim5pasted__polySurface19.geometry} material={materials['Lipsync_anim5:pasted__Material #29.001']} skeleton={nodes.Lipsync_anim5pasted__polySurface19.skeleton} />
            <skinnedMesh name="Lipsync_anim5pasted__polySurface70" geometry={nodes.Lipsync_anim5pasted__polySurface70.geometry} material={materials['Lipsync_anim5:pasted__GumsMaterial2']} skeleton={nodes.Lipsync_anim5pasted__polySurface70.skeleton} />
            <group name="Lipsync_anim5pasted__polySurface71">
              <skinnedMesh name="Mesh005" geometry={nodes.Mesh005.geometry} material={materials['Lipsync_anim5:pasted__TeethMaterial2']} skeleton={nodes.Mesh005.skeleton} />
              <skinnedMesh name="Mesh005_1" geometry={nodes.Mesh005_1.geometry} material={materials['Lipsync_anim5:pasted__GumsMaterial2']} skeleton={nodes.Mesh005_1.skeleton} />
            </group>
            <skinnedMesh name="Lipsync_anim5pasted__polySurface76" geometry={nodes.Lipsync_anim5pasted__polySurface76.geometry} material={materials['Lipsync_anim5:pasted__GumsMaterial2']} skeleton={nodes.Lipsync_anim5pasted__polySurface76.skeleton} />
            <group name="Lipsync_anim5pasted__polySurface79">
              <skinnedMesh name="Mesh006" geometry={nodes.Mesh006.geometry} material={materials['Lipsync_anim5:pasted__GumsMaterial2']} skeleton={nodes.Mesh006.skeleton} />
              <skinnedMesh name="Mesh006_1" geometry={nodes.Mesh006_1.geometry} material={materials['Lipsync_anim5:pasted__TeethMaterial2']} skeleton={nodes.Mesh006_1.skeleton} />
            </group>
          </group>
        </group>
        <group name="Lipsync_anim5group" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group name="Lipsync_anim5pasted__eye1" />
          <group name="Lipsync_anim5pasted__Gums">
            <group name="Lipsync_anim5pasted__polySurface55">
              <group name="Lipsync_anim5pasted__polySurface73">
                <group name="Lipsync_anim5pasted__polySurface74" />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/LipSyncMen3.glb')
