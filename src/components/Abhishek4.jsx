/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 abhishek4.glb 
*/

import React, { useState,useEffect,useRef } from 'react'
import { useGLTF,useAnimations, useFBX} from '@react-three/drei'
import { subscribe } from '../events'




export function Abhishek4Model({ shouldTalk,setAnimationDuration, ...props }) {
  const { nodes, materials } = useGLTF('/models/abhishek4.glb')

  const {animations : idleanimation} = useFBX("/models/idlebreath.fbx");
  const {animations : talkanimation} = useFBX("/models/abhishektalk.fbx");

  idleanimation[0].name = "idle",
  talkanimation[0].name = "talk",

  console.log("talkanimation value---",talkanimation)
  console.log("idleanimation value---",idleanimation)

  const group = useRef();
  const {actions}=  useAnimations([talkanimation[0],idleanimation[0]],group);


  console.log("action -------useanimation ----value---",actions);

  useEffect(()=>{
    console.log("Subscribe it")
    subscribe("startAnimation",StartTalk)
    actions.idle.reset().fadeIn(0.5).play();
    return ()=> actions.idle.fadeOut(0.5)
      // window.addEventListener("startAnimation",(e)=>{ StartTalk(e);});
    },[]);

    
function StartTalk(data){
  console.log("REceived data ",data)
var talk=data.detail.talk;
//var talk=data.detail.talk;

    if (talk!==true) {
      actions.idle.play();
      actions.talk.stop();
     
      
    
      // idleaction.idlemen.stop()
      // actions.idelandtalk.play();
      
      console.log("Enetered", "for Talk***********")
     
      
    } else {  
      console.log("Enetered", "DStop")

      // actions.idelandtalk.stop();
      actions.talk.play();
      actions.idle.stop();
      
      
      // idleaction.idlemen.reset().fadeIn(0.8).play();

      // group.current.position.set(0, 1, 2);
      
    
      
    }
 
  }
  return (
    <group {...props} dispose={null} ref={group} castShadow={true} receiveShadow={true}>
      <group scale={0.01} position={[-0.056, -0.034, 0.039]} rotation={[-1.50, -0.038, -0.052]}>
        <primitive object={nodes.root} />
        <skinnedMesh castShadow={true} receiveShadow={true} geometry={nodes.rp_eric_rigged_001_geo.geometry} material={materials['rp_eric_rigged_001_mat.002']} skeleton={nodes.rp_eric_rigged_001_geo.skeleton} />
      </group>
    </group>
  )
}

useGLTF.preload('/abhishek4.glb')
