/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 hero.glb 
*/

import React, {  useEffect, useRef, useState} from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { subscribe } from '../events'
export function HeroModel({ shouldTalk,setAnimationDuration, ...props }){ 
console.log("setAnimationDuration",setAnimationDuration )
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/hero.glb')
  const { actions } = useAnimations(animations, group);

  console.log("actions ----",actions);
  


 
  
  
   
useEffect(()=>{
console.log("Subscribe it")
subscribe("startAnimation",StartTalk)
  // window.addEventListener("startAnimation",(e)=>{ StartTalk(e);});
},[]);

function StartTalk(data){
  console.log("REceived data ",data)
var talk=data.detail.talk;
//var talk=data.detail.talk;

    if (talk==true) {
      
      actions.lipsync.play();
    
      console.log("Enetered", "for Talk***********")
     
      
    } else {  
      console.log("Enetered", "DStop")

      
      actions.lipsync.stop();
    
    }
 

 
}




  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Group" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group name="DeformationSystem">
            <primitive object={nodes.Root_M} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/hero.glb')
